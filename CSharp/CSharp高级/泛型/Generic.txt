一、泛型的定义

在编程程序时，经常会遇到功能非常相似的模块，只是它们处理的数据不一样。但我们没有办法，
只能分别写多个方法来处理不同的数据类型。
这个时候，那么问题来了，有没有一种办法，用同一个方法来处理传入不同种类型参数的办法呢？
泛型的出现就是专门来解决这个问题的。

二、泛型的作用

1、object类型是一切类型的父类。object是所有类型的基类

2、通过继承，子类拥有父类的一切属性和行为，任何父类出现的地方，都可以用子类来代替。

三、泛型类型参数

在泛型类型或方法定义中，类型参数是在其实例化泛型类型的一个变量时，客户端指定的特定类型的占位符。 
泛型类( GenericList<T>)无法按原样使用，因为它不是真正的类型；它更像是类型的蓝图。 
若要使用 GenericList<T>，客户端代码必须通过指定尖括号内的类型参数来声明并实例化构造类型。 
此特定类的类型参数可以是编译器可识别的任何类型。 可创建任意数量的构造类型实例，其中每个使用不同的类型参数。

泛型是延迟声明的：即定义的时候没有指定具体的参数类型，把参数类型的声明推迟到了调用的时候才指定参数类型。 
延迟思想在程序架构设计的时候很受欢迎。例如：分布式缓存队列、EF的延迟加载等等。

控制台程序最终会编译成一个exe程序，exe被点击的时候，会经过JIT(即时编译器)的编译，最终生成二进制代码，
才能被计算机执行。泛型加入到语法以后，VS自带的编译器又做了升级，升级之后编译时遇到泛型，会做特殊的处理：
生成占位符。再次经过JIT编译的时候，会把上面编译生成的占位符替换成具体的数据类型。

1、泛型性能问题

比较普通方法、Object参数类型的方法、泛型方法的性能。
从结果中可以看出：泛型方法的性能最高，其次是普通方法，object方法的性能最低。

注意：

1）、泛型在声明的时候可以不指定具体的类型，但是在使用的时候必须指定具体类型
如果子类也是泛型的，那么继承的时候可以不指定具体类型

2）、类实现泛型接口也是这种情况


四、泛型约束
泛型约束，实际上就是约束的类型T。使T必须遵循一定的规则。
比如T必须继承自某个类，或者T必须实现某个接口等等。
只需要where关键字，加上约束的条件。

泛型约束总共有五种。

约束	             说明

T：结构	         类型参数必须是值类型
T：类	         类型参数必须是引用类型；这一点也适用于任何类、接口、委托或数组类型。
T：new()   	     类型参数必须具有无参数的公共构造函数。 当与其他约束一起使用时，new() 约束必须最后指定。
T：<基类名>	     类型参数必须是指定的基类或派生自指定的基类。
T：<接口名称>	 类型参数必须是指定的接口或实现指定的接口。 可以指定多个接口约束。 约束接口也可以是泛型的。

1、基类约束

上面打印的方法约束T类型必须是People类型。

 1 /// <summary>
 2 /// 基类约束：约束T必须是People类型或者是People的子类
 3 /// </summary>
 4 /// <typeparam name="T"></typeparam>
 5 /// <param name="tParameter"></param>
 6 public static void Show<T>(T tParameter) where T : People
 7 {
 8       Console.WriteLine($"{tParameter.Id}_{tParameter.Name}");
 9       tParameter.Hi();
10 }

 注意：

基类约束时，基类不能是密封类，即不能是sealed类。sealed类表示该类不能被继承，在这里用作约束就无任何意义，因为sealed类没有子类。

2、接口约束

/// <summary>
/// 接口约束
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="t"></param>
/// <returns></returns>
public static T Get<T>(T t) where T : ISports
{
      t.Pingpang();
      return t;
}

 3、引用类型约束 class

引用类型约束保证T一定是引用类型的。

 1 /// <summary>
 2 /// 引用类型约束
 3 /// </summary>
 4 /// <typeparam name="T"></typeparam>
 5 /// <param name="t"></param>
 6 /// <returns></returns>
 7 public static T Get<T>(T t) where T : class
 8 {
 9       return t;
10 }

 4、值类型约束  struct

值类型约束保证T一定是值类型的。

 1 /// <summary>
 2 /// 值类型类型约束
 3 /// </summary>
 4 /// <typeparam name="T"></typeparam>
 5 /// <param name="t"></param>
 6 /// <returns></returns>
 7 public static T Get<T>(T t) where T : struct
 8 {
 9       return t;
10 }

 5、无参数构造函数约束  new()

 1 /// <summary>
 2 /// new()约束
 3 /// </summary>
 4 /// <typeparam name="T"></typeparam>
 5 /// <param name="t"></param>
 6 /// <returns></returns>
 7 public static T Get<T>(T t) where T : new()
 8 {
 9      return t;
10 }

 泛型约束也可以同时约束多个，例如：


1 public static void Show<T>(T tParameter)
2             where T : People, ISports, IWork, new()
3 {
4       Console.WriteLine($"{tParameter.Id}_{tParameter.Name}");
5       tParameter.Hi();
6       tParameter.Pingpang();
7       tParameter.Work();
8 }

 注意：有多个泛型约束时，new()约束一定是在最后。


五、泛型缓存

类中的静态类型无论实例化多少次，在内存中只会有一个。静态构造函数只会执行一次。
在泛型类中，T类型不同，每个不同的T类型，都会产生一个不同的副本，
所以会产生不同的静态属性、不同的静态构造函数

泛型会为不同的类型都创建一个副本，所以静态构造函数会执行5次。 
而且每次静态属性的值都是一样的。利用泛型的这一特性，可以实现缓存。

注意：只能为不同的类型缓存一次。泛型缓存比字典缓存效率高。泛型缓存不能主动释放