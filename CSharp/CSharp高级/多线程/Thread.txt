一、进程的概念

进程（Process）是Windows系统中的一个基本概念，它包含着一个运行程序所需要的资源。
一个正在运行的应用程序在操作系统中被视为一个进程，进程可以包括一个或多个线程。

线程是操作系统分配处理器时间的基本单元，在进程中可以有多个线程同时执行代码。
进程之间是相对独立的，一个进程无法访问另一个进程的数据（除非利用分布式计算方式），
一个进程运行的失败也不会影响其他进程的运行，Windows系统就是利用进程把工作划分为多个独立的区域的。
进程可以理解为一个程序的基本边界。是应用程序的一个运行例程，是应用程序的一次动态执行过程。


二、线程的概念
线程是比进程还要小的单位。
线程（Thread）是进程中的基本执行单元，是操作系统分配CPU时间的基本单位，一个进程可以包含若干个线程，
在进程入口执行的第一个线程被视为这个进程的主线程。
在.NET应用程序中，都是以Main()方法作为入口的，当调用此方法时系统就会自动创建一个主线程。
线程主要是由CPU寄存器、调用栈和线程本地存储器（Thread Local Storage，TLS）组成的。

CPU寄存器：主要记录当前所执行线程的状态，
调用栈：主要用于维护线程所调用到的内存与数据，
TLS：主要用于存放线程的状态信息。


三、多线程

多线程的优点：
（1）可以同时完成多个任务；可以使程序的响应速度更快；

（2）可以让占用大量处理时间的任务或当前没有进行处理的任务定期将处理时间让给别的任务；

（3）可以随时停止任务；

（4）可以设置每个任务的优先级以优化程序性能。

可以多线程的原因：

1、CPU运行速度太快，硬件处理速度跟不上，所以操作系统进行分时间片管理。
这样，从宏观角度来说是多线程并发的，因为CPU速度太快，察觉不到，看起来是同一时刻执行了不同的操作。
但是从微观角度来讲，同一时刻只能有一个线程在处理。

2、目前电脑都是多核多CPU的，一个CPU在同一时刻只能运行一个线程，
但是多个CPU在同一时刻就可以运行多个线程。


多线程的缺点：
（1）线程也是程序，所以线程需要占用内存，线程越多，占用内存也越多。

（2）多线程需要协调和管理，所以需要占用CPU时间以便跟踪线程。

（3）线程之间对共享资源的访问会相互影响，必须解决争用共享资源的问题。

（4）线程太多会导致控制太复杂，最终可能造成很多程序缺陷。


创建多线程的步骤：

1、编写线程所要执行的方法

2、实例化Thread类，并传入一个指向线程所要执行方法的委托。（这时线程已经产生，但还没有运行）

3、调用Thread实例的Start方法，标记该线程可以被CPU执行了，但具体执行时间由CPU决定

System.Threading.Thread类


Thread类是是控制线程的基础类，位于System.Threading命名空间下，具有4个重载的构造函数：
名称	说明

Thread(ParameterizedThreadStart)	
初始化 Thread 类的新实例，指定允许对象在线程启动时传递给线程的委托。要执行的方法是有参的。

Thread(ParameterizedThreadStart, Int32)	
初始化 Thread 类的新实例，指定允许对象在线程启动时传递给线程的委托，并指定线程的最大堆栈大小

Thread(ThreadStart)	
初始化 Thread 类的新实例。要执行的方法是无参的。

Thread(ThreadStart, Int32)	
初始化 Thread 类的新实例，指定线程的最大堆栈大小。



using System;
using System.Threading;

namespace ThreadDemo
{
    class Program
    {
        static void Main(string[] args)
        {
            Thread.CurrentThread.Name = "System Thread";
            Console.WriteLine(Thread.CurrentThread.Name + "'Status:" + Thread.CurrentThread.ThreadState);
            Console.ReadKey();
        }
    }
}

输出如下：
System Thread'Status:Running

通过Thread类的静态属性CurrentThread获取了当前执行的线程，对其Name属性赋值“System Thread”
，最后还输出了它的当前状态（ThreadState）。

所谓静态属性，就是这个类所有对象所公有的属性，
不管你创建了多少个这个类的实例，但是类的静态属性在内存中只有一个。
很容易理解CurrentThread为什么是静态的——虽然有多个线程同时存在，
但是在某一个时刻，CPU只能执行其中一个。

通过其中提供的Thread类来创建和控制线程，ThreadPool类用于管理线程池等。

Thread类有几个至关重要的方法，描述如下：

Start()：启动线程；
Sleep(int)：静态方法，暂停当前线程指定的毫秒数；
Abort()：通常使用该方法来终止一个线程；
Suspend()：该方法并不终止未完成的线程，它仅仅挂起线程，以后还可恢复；
Resume()：恢复被Suspend()方法挂起的线程的执行；



四、操纵线程
使用Thread类创建线程时，只需提供线程入口即可。（线程入口使程序知道该让这个线程干什么事）

线程入口是通过ThreadStart代理（delegate）来提供的，你可以把ThreadStart理解为一个函数指针，
指向线程要执行的函数，当调用Thread.Start()方法后，线程就开始执行ThreadStart所代表或者说指向的函数。

主线程Main()函数

所有线程都是依附于Main()函数所在的线程的，Main()函数是C#程序的入口，起始线程可以称之为主线程。
如果所有的前台线程都停止了，那么主线程可以终止，而所有的后台线程都将无条件终止。
所有的线程虽然在微观上是串行执行的，但是在宏观上你完全可以认为它们在并行执行。

Thread.ThreadState 属性

这个属性代表了线程运行时状态，在不同的情况下有不同的值，有时候可以通过对该值的判断来设计程序流程。
ThreadState 属性的取值如下：

Aborted：线程已停止；
AbortRequested：线程的Thread.Abort()方法已被调用，但是线程还未停止；
Background：线程在后台执行，与属性Thread.IsBackground有关；
Running：线程正在正常运行；
Stopped：线程已经被停止；
StopRequested：线程正在被要求停止；
Suspended：线程已经被挂起（此状态下，可以通过调用Resume()方法重新运行）；
SuspendRequested：线程正在要求被挂起，但是未来得及响应；
Unstarted：未调用Thread.Start()开始线程的运行；
WaitSleepJoin：线程因为调用了Wait(),Sleep()或Join()等方法处于封锁状态；

上面提到了Background状态表示该线程在后台运行,后台线程跟前台线程只有一个区别，
那就是后台线程不妨碍程序的终止。
一旦一个进程所有的前台线程都终止后，CLR（通用语言运行环境）
将通过调用任意一个存活中的后台进程的Abort()方法来彻底终止进程。


线程的优先级

当线程之间争夺CPU时间时，CPU 是按照线程的优先级给予服务的。在C#应用程序中，
用户可以设定5个不同的优先级，
由高到低分别是Highest，AboveNormal，Normal，BelowNormal，Lowest，
在创建线程时如果不指定优先级，那么系统默认为ThreadPriority.Normal。

给一个线程指定优先级，可以使用如下代码：
//设定优先级为最低
myThread.Priority=ThreadPriority.Lowest;

通过设定线程的优先级，可以安排一些相对重要的线程优先执行，例如对用户的响应等等。


五、

ThreadStart是一个无参的、返回值为void的委托。委托定义如下：

public delegate void ThreadStart()

通过ThreadStart委托创建并运行一个线程：

  class Program
     {
         static void Main(string[] args)
         {
             //创建无参的线程
             Thread thread1 = new Thread(new ThreadStart(Thread1));
             //调用Start方法执行线程
             thread1.Start();
 
             Console.ReadKey();
         }
 
         /// <summary>
         /// 创建无参的方法
         /// </summary>
         static void Thread1()
         {
             Console.WriteLine("这是无参的方法");
         }
     }



除了可以运行静态的方法，还可以运行实例方法

  class Program
     {
         static void Main(string[] args)
         {
             //创建ThreadTest类的一个实例
             ThreadTest test=new ThreadTest();
             //调用test实例的MyThread方法
             Thread thread = new Thread(new ThreadStart(test.MyThread));
             //启动线程
             thread.Start();
             Console.ReadKey();
         }
     }
 
     class ThreadTest
     {
         public void MyThread()
         {
             Console.WriteLine("这是一个实例方法");
         }
     }


为了简单，也可以通过匿名委托或Lambda表达式来为Thread的构造方法赋值

  static void Main(string[] args)
  {
        //通过匿名委托创建
        Thread thread1 = new Thread(delegate() { Console.WriteLine("我是通过匿名委托创建的线程"); });
        thread1.Start();
        //通过Lambda表达式创建
        Thread thread2 = new Thread(() => Console.WriteLine("我是通过Lambda表达式创建的委托"));
        thread2.Start();
        Console.ReadKey();
  }


ParameterizedThreadStart是一个有参的、返回值为void的委托，定义如下：

public delegate void ParameterizedThreadStart(Object obj)

class Program
     {
         static void Main(string[] args)
         {
             //通过ParameterizedThreadStart创建线程
             Thread thread = new Thread(new ParameterizedThreadStart(Thread1));
             //给方法传值
             thread.Start("这是一个有参数的委托");
             Console.ReadKey();
         }
 
         /// <summary>
         /// 创建有参的方法
         /// 注意：方法里面的参数类型必须是Object类型
         /// </summary>
         /// <param name="obj"></param>
         static void Thread1(object obj)
         {
             Console.WriteLine(obj);
         }
     }

注意：ParameterizedThreadStart委托的参数类型必须是Object的。
如果使用的是不带参数的委托，不能使用带参数的Start方法运行线程，否则系统会抛出异常。
但使用带参数的委托，可以使用thread.Start()来运行线程，这时所传递的参数值为null。


 线程的常用属性

   属性名称	                     说明
CurrentContext	    获取线程正在其中执行的当前上下文。
CurrentThread	    获取当前正在运行的线程。
ExecutionContext	获取一个 ExecutionContext 对象，该对象包含有关当前线程的各种上下文的信息。
IsAlive	            获取一个值，该值指示当前线程的执行状态。
IsBackground	    获取或设置一个值，该值指示某个线程是否为后台线程。
IsThreadPoolThread	获取一个值，该值指示线程是否属于托管线程池。
ManagedThreadId	    获取当前托管线程的唯一标识符。
Name	            获取或设置线程的名称。
Priority	        获取或设置一个值，该值指示线程的调度优先级。
ThreadState 	    获取一个值，该值包含当前线程的状态。


     static void Main(string[] args)
         {
             //获取正在运行的线程
             Thread thread = Thread.CurrentThread;
             //设置线程的名字
             thread.Name = "主线程";
             //获取当前线程的唯一标识符
             int id = thread.ManagedThreadId;
             //获取当前线程的状态
             ThreadState state= thread.ThreadState;
             //获取当前线程的优先级
             ThreadPriority priority= thread.Priority;
             string strMsg = string.Format("Thread ID:{0}\n" + "Thread Name:{1}\n" +
                 "Thread State:{2}\n" + "Thread Priority:{3}\n", id, thread.Name,
                 state, priority); 
             Console.WriteLine(strMsg);
                       
             Console.ReadKey();
         }