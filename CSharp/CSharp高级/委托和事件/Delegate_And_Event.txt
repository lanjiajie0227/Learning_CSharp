一、.NET框架中的委托和事件
using System;

/// <summary>
/// 假设我们有个高档的热水器，我们给它通上电，当水温超过95 度的时候：
/// 1、扬声器会开始发出语音，告诉你水的温度；2、液晶屏也会改变水温的显示，来提示水已经快烧开了。
///现在我们需要写个程序来模拟这个烧水的过程，
///我们将定义一个类来代表热水器，我们管它叫：Heater，
///它有代表水温的字段，叫做 temperature；当然，
///还有必不可少的给水加热方法 BoilWater()，
///一个发出语音警报的方法 MakeAlert()，
///一个显示水温的方法，ShowMsg()。
/// </summary>

namespace DelegateAndEvent
{
    /// <summary>
    /// 热水器
    /// </summary>
    public class Heater
    {
        /// <summary>
        /// 水温
        /// </summary>
        private int temperature;

        //利用委托变量和事件通知 警报器 和 显示器
        public delegate void BoilHandler(int param);  //委托
        public event BoilHandler BoilEvent;   //事件

        ///<summary>
        ///烧水
        ///</summary>
        public void BoilWater()
        {
            for (int i = 0; i <= 100; i++)
            {
                temperature = i;
                //if (temperature > 95)
                //{
                //    MakeAlert(temperature);
                //    ShowMsg(temperature);
                //    Console.ReadKey();
                //}
                if (temperature > 95)
                {
                    if (BoilEvent != null)
                    {
                        BoilEvent(temperature);  //调用所有注册对象的方法
                    }
                }
            }
        }
    }

    /// <summary>
    /// 警报器
    /// </summary>
    public class Alarm
    {
        ///<summary>
        ///发出语音警报
        ///</summary>
        public void MakeAlert(int param)
        {
            Console.WriteLine("Alarm：嘀嘀嘀，水已经 {0} 度了：", param);
        }
    }

    /// <summary>
    /// 显示器
    /// </summary>
    public class Display
    {
        ///<summary>
        ///显示水温
        ///</summary>
        public static void ShowMsg(int param)
        {
            Console.WriteLine("Display：水快开了，当前温度：{0}度。", param);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Heater heater = new Heater();
            Alarm alarm = new Alarm();
            heater.BoilEvent += alarm.MakeAlert;  //注册方法
            heater.BoilEvent += (new Alarm()).MakeAlert;
            heater.BoilEvent += Display.ShowMsg;  //注册静态方法
            heater.BoilWater();  //烧水，会自动调用注册过对象的方法
            Console.ReadKey();
        }
    }
}

二、Observer 设计模式简介
上面的代码采用Observer 设计模式

Observer 设计模式中主要包括如下两类对象：

Subject：监视对象，它往往包含着其他对象所感兴趣的内容。
在本范例中，热水器就是一个监视对象，它包含的其他对象所感兴趣的内容，
就是 temprature 字段，当这个字段的值快到100 时，会不断把数据发给监视它的对象。

Observer：监视者，它监视Subject，
当 Subject 中的某件事发生的时候，会告知Observer，
而Observer 则会采取相应的行动。在本范例中，Observer 有警报器和显示器，
它们采取的行动分别是发出警报和显示水温。

在本例中，事情发生的顺序应该是这样的：

1. 警报器和显示器告诉热水器，它对它的温度比较感兴趣(注册)。

2. 热水器知道后保留对警报器和显示器的引用。

3. 热水器进行烧水这一动作，当水温超过 95 度时，通过对警报器和显示器的引用，
自动调用警报器的MakeAlert()方法、显示器的ShowMsg()方法。

GOF 对它进行了抽象，称为 Observer 设计模式：
Observer 设计模式是为了定义对象间的一种一对多的依赖关系，
以便于当一个对象的状态改变时，其他依赖于它的对象会被自动告知并更新。
Observer 模式是一种松耦合的设计模式。



三、.NET Framework 的编码规范：

1. 委托类型的名称都应该以 EventHandler 结束。

2. 委托的原型定义：有一个void 返回值，
并接受两个输入参数：一个Object 类型，一个EventArgs 类型(或继承自EventArgs)。

3. 事件的命名为委托去掉 EventHandler 之后剩余的部分。

4. 继承自 EventArgs 的类型应该以EventArgs 结尾。

1. 委托声明原型中的Object 类型的参数代表了Subject，也就是监视对象，在本例中是Heater(热水器)。回调函数(比如Alarm 的MakeAlert)可以通过它访问触发事件的对象(Heater)。

2. EventArgs 对象包含了Observer 所感兴趣的数据，在本例中是temperature。

上面这些其实不仅仅是为了编码规范而已，这样也使得程序有更大的灵活性。
比如说，如果我们不光想获得热水器的温度，
还想在Observer 端(警报器或者显示器)方法中获得它的生产日期、型号、价格，
那么委托和方法的声明都会变得很麻烦，而如果我们将热水器的引用传给警报器的方法，
就可以在方法中直接访问热水器了

 /// <summary>
    /// 热水器
    /// </summary>
    public class Heater
    {
        /// <summary>
        /// 水温
        /// </summary>
        private int temperature;
        public string type = "RealFire 001";   //添加型号
        public string area = "China Xian";   //产地

        //利用委托变量和事件通知 警报器 和 显示器
        public delegate void BoiledEventHandler(Object sender, BoiledEventArgs e);  //委托
        public event BoiledEventHandler Boiled;   //事件

        //定义BoiledEventArgs类，传递给Observer所感兴趣的信息
        public class BoiledEventArgs : EventArgs
        {
            public readonly int temperature;
            public BoiledEventArgs(int temperature)
            {
                this.temperature = temperature;
            }
        }

        // 可以供继承自 Heater 的类重写，以便继承类拒绝其他对象对它的监视
        protected virtual void OnBoiled(BoiledEventArgs e)
        {
            if (Boiled != null)
            {
                Boiled(this, e);//注册所有注册对象的方法
            }
        }

        ///<summary>
        ///烧水
        ///</summary>
        public void BoilWater()
        {
            for (int i = 0; i <= 100; i++)
            {
                temperature = i;
                if (temperature > 95)
                {
                    // 建立BoiledEventArgs 对象。
                    BoiledEventArgs e = new BoiledEventArgs(temperature);
                    OnBoiled(e);  //调用OnBoiled方法

                }
            }
        }
    }

    /// <summary>
    /// 警报器
    /// </summary>
    public class Alarm
    {
        ///<summary>
        ///发出语音警报
        ///</summary>
        public void MakeAlert(Object sender, Heater.BoiledEventArgs e)
        {
            Heater heater = (Heater)sender;
            //访问sender中的公共字段
            Console.WriteLine("Alarm：{0} - {1}: ", heater.area, heater.type);
            Console.WriteLine("Alarm：嘀嘀嘀，水已经 {0} 度了：", e.temperature);
            Console.WriteLine();
        }
    }

    /// <summary>
    /// 显示器
    /// </summary>
    public class Display
    {
        ///<summary>
        ///显示水温
        ///</summary>
        public static void ShowMsg(Object sender, Heater.BoiledEventArgs e)  //静态方法
        {
            Heater heater = (Heater)sender;
            Console.WriteLine("Display：{0} - {1}: ", heater.area, heater.type);
            Console.WriteLine("Display：水快开了，当前温度：{0}度。", e.temperature);
            Console.WriteLine();
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Heater heater = new Heater();
            Alarm alarm = new Alarm();
            heater.Boiled += alarm.MakeAlert;  //注册方法
            heater.Boiled += (new Alarm()).MakeAlert; //给匿名对象注册
            heater.Boiled += new Heater.BoiledEventHandler(alarm.MakeAlert);//也可以这样注册
            heater.Boiled += Display.ShowMsg;  //注册静态方法
            heater.BoilWater();  //烧水，会自动调用注册过对象的方法
            Console.ReadKey();
        }
    }

